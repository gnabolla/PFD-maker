import * as ExcelJS from 'exceljs';\nimport { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell } from 'docx';\nimport puppeteer from 'puppeteer';\nimport { PDSData } from '@/models/pds';\nimport { logger } from '@/utils/logger';\nimport { AppError } from '@/middleware/errorHandler';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface ExportOptions {\n  format: 'excel' | 'word' | 'pdf';\n  template?: string;\n  includeSignature?: boolean;\n  watermark?: string;\n}\n\nexport interface ExportResult {\n  filename: string;\n  filepath: string;\n  mimetype: string;\n  size: number;\n}\n\nexport class FileExportService {\n  /**\n   * Exports PDS data to specified format\n   */\n  public static async exportPDS(pdsData: PDSData, options: ExportOptions): Promise<ExportResult> {\n    try {\n      logger.info('Starting PDS export', {\n        format: options.format,\n        template: options.template\n      });\n\n      let result: ExportResult;\n\n      switch (options.format) {\n        case 'excel':\n          result = await this.exportToExcel(pdsData, options);\n          break;\n        case 'word':\n          result = await this.exportToWord(pdsData, options);\n          break;\n        case 'pdf':\n          result = await this.exportToPDF(pdsData, options);\n          break;\n        default:\n          throw new AppError('Unsupported export format', 400, 'UNSUPPORTED_FORMAT');\n      }\n\n      logger.info('PDS export completed', {\n        format: options.format,\n        filename: result.filename,\n        size: result.size\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('PDS export failed', {\n        format: options.format,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Exports PDS data to Excel format\n   */\n  private static async exportToExcel(pdsData: PDSData, options: ExportOptions): Promise<ExportResult> {\n    const workbook = new ExcelJS.Workbook();\n    \n    // Set workbook properties\n    workbook.creator = 'PDS Maker';\n    workbook.lastModifiedBy = 'PDS Maker';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n    workbook.lastPrinted = new Date();\n    \n    // Create worksheet\n    const worksheet = workbook.addWorksheet('Personal Data Sheet', {\n      pageSetup: {\n        paperSize: 9, // A4\n        orientation: 'portrait',\n        margins: {\n          left: 0.7, right: 0.7,\n          top: 0.75, bottom: 0.75,\n          header: 0.3, footer: 0.3\n        }\n      }\n    });\n    \n    // Add header\n    this.addExcelHeader(worksheet);\n    \n    // Add personal information section\n    this.addPersonalInformationToExcel(worksheet, pdsData.personalInformation);\n    \n    // Add family background section\n    this.addFamilyBackgroundToExcel(worksheet, pdsData.familyBackground);\n    \n    // Add educational background section\n    this.addEducationalBackgroundToExcel(worksheet, pdsData.educationalBackground);\n    \n    // Add civil service eligibility section\n    this.addCivilServiceEligibilityToExcel(worksheet, pdsData.civilServiceEligibility);\n    \n    // Add work experience section\n    this.addWorkExperienceToExcel(worksheet, pdsData.workExperience);\n    \n    // Add other sections...\n    \n    // Generate filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `PDS_${pdsData.personalInformation.surname}_${timestamp}.xlsx`;\n    const filepath = path.join(process.env.UPLOAD_PATH || './uploads', filename);\n    \n    // Save file\n    await workbook.xlsx.writeFile(filepath);\n    \n    // Get file stats\n    const stats = fs.statSync(filepath);\n    \n    return {\n      filename,\n      filepath,\n      mimetype: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      size: stats.size\n    };\n  }\n\n  /**\n   * Exports PDS data to Word format\n   */\n  private static async exportToWord(pdsData: PDSData, options: ExportOptions): Promise<ExportResult> {\n    // Create document\n    const doc = new Document({\n      sections: [{\n        properties: {},\n        children: [\n          // Document title\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"PERSONAL DATA SHEET\",\n                bold: true,\n                size: 28,\n              }),\n            ],\n            alignment: 'center',\n            spacing: { after: 200 }\n          }),\n          \n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"(CS Form No. 212, Revised 2017)\",\n                italics: true,\n                size: 20,\n              }),\n            ],\n            alignment: 'center',\n            spacing: { after: 400 }\n          }),\n          \n          // Warning message\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"Warning: Any misrepresentation made in the Personal Data Sheet and the Work Experience Sheet shall cause the filing of administrative/criminal case/s against the person concerned.\",\n                bold: true,\n                color: \"FF0000\",\n                size: 18,\n              }),\n            ],\n            spacing: { after: 300 }\n          }),\n          \n          // Personal Information Section\n          ...this.createPersonalInformationWordSection(pdsData.personalInformation),\n          \n          // Family Background Section\n          ...this.createFamilyBackgroundWordSection(pdsData.familyBackground),\n          \n          // Educational Background Section\n          ...this.createEducationalBackgroundWordSection(pdsData.educationalBackground),\n          \n          // Add other sections...\n        ],\n      }],\n    });\n    \n    // Generate filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `PDS_${pdsData.personalInformation.surname}_${timestamp}.docx`;\n    const filepath = path.join(process.env.UPLOAD_PATH || './uploads', filename);\n    \n    // Save file\n    const buffer = await Packer.toBuffer(doc);\n    fs.writeFileSync(filepath, buffer);\n    \n    // Get file stats\n    const stats = fs.statSync(filepath);\n    \n    return {\n      filename,\n      filepath,\n      mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      size: stats.size\n    };\n  }\n\n  /**\n   * Exports PDS data to PDF format\n   */\n  private static async exportToPDF(pdsData: PDSData, options: ExportOptions): Promise<ExportResult> {\n    // Generate HTML content\n    const htmlContent = this.generatePDSHTML(pdsData, options);\n    \n    // Launch Puppeteer\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\n    });\n    \n    try {\n      const page = await browser.newPage();\n      \n      // Set content\n      await page.setContent(htmlContent, { waitUntil: 'networkidle0' });\n      \n      // Generate filename\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const filename = `PDS_${pdsData.personalInformation.surname}_${timestamp}.pdf`;\n      const filepath = path.join(process.env.UPLOAD_PATH || './uploads', filename);\n      \n      // Generate PDF\n      await page.pdf({\n        path: filepath,\n        format: 'Legal', // 8.5 x 14 inches as required by CSC\n        printBackground: true,\n        margin: {\n          top: '0.5in',\n          bottom: '0.5in',\n          left: '0.5in',\n          right: '0.5in'\n        }\n      });\n      \n      // Get file stats\n      const stats = fs.statSync(filepath);\n      \n      return {\n        filename,\n        filepath,\n        mimetype: 'application/pdf',\n        size: stats.size\n      };\n    } finally {\n      await browser.close();\n    }\n  }\n\n  /**\n   * Adds Excel header\n   */\n  private static addExcelHeader(worksheet: ExcelJS.Worksheet): void {\n    // Merge cells for title\n    worksheet.mergeCells('A1:H1');\n    const titleCell = worksheet.getCell('A1');\n    titleCell.value = 'PERSONAL DATA SHEET';\n    titleCell.font = { bold: true, size: 16 };\n    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    \n    // Add form number\n    worksheet.mergeCells('A2:H2');\n    const formCell = worksheet.getCell('A2');\n    formCell.value = '(CS Form No. 212, Revised 2017)';\n    formCell.font = { italics: true, size: 12 };\n    formCell.alignment = { horizontal: 'center', vertical: 'middle' };\n    \n    // Add warning\n    worksheet.mergeCells('A4:H5');\n    const warningCell = worksheet.getCell('A4');\n    warningCell.value = 'Warning: Any misrepresentation made in the Personal Data Sheet and the Work Experience Sheet shall cause the filing of administrative/criminal case/s against the person concerned.';\n    warningCell.font = { bold: true, color: { argb: 'FFFF0000' }, size: 10 };\n    warningCell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };\n  }\n\n  /**\n   * Adds personal information section to Excel\n   */\n  private static addPersonalInformationToExcel(worksheet: ExcelJS.Worksheet, personalInfo: PDSData['personalInformation']): void {\n    let currentRow = 7;\n    \n    // Section header\n    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);\n    const headerCell = worksheet.getCell(`A${currentRow}`);\n    headerCell.value = 'I. PERSONAL INFORMATION';\n    headerCell.font = { bold: true, size: 12 };\n    headerCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE0E0E0' } };\n    currentRow += 2;\n    \n    // Name fields\n    worksheet.getCell(`A${currentRow}`).value = 'SURNAME:';\n    worksheet.getCell(`B${currentRow}`).value = personalInfo.surname;\n    worksheet.getCell(`C${currentRow}`).value = 'FIRST NAME:';\n    worksheet.getCell(`D${currentRow}`).value = personalInfo.firstName;\n    currentRow++;\n    \n    worksheet.getCell(`A${currentRow}`).value = 'MIDDLE NAME:';\n    worksheet.getCell(`B${currentRow}`).value = personalInfo.middleName;\n    worksheet.getCell(`C${currentRow}`).value = 'NAME EXTENSION:';\n    worksheet.getCell(`D${currentRow}`).value = personalInfo.nameExtension || 'N/A';\n    currentRow++;\n    \n    // Date and place of birth\n    worksheet.getCell(`A${currentRow}`).value = 'DATE OF BIRTH:';\n    worksheet.getCell(`B${currentRow}`).value = personalInfo.dateOfBirth;\n    worksheet.getCell(`C${currentRow}`).value = 'PLACE OF BIRTH:';\n    worksheet.getCell(`D${currentRow}`).value = personalInfo.placeOfBirth;\n    currentRow++;\n    \n    // Civil status\n    worksheet.getCell(`A${currentRow}`).value = 'CIVIL STATUS:';\n    worksheet.getCell(`B${currentRow}`).value = personalInfo.civilStatus;\n    if (personalInfo.civilStatusDetails) {\n      worksheet.getCell(`C${currentRow}`).value = 'DETAILS:';\n      worksheet.getCell(`D${currentRow}`).value = personalInfo.civilStatusDetails;\n    }\n    currentRow++;\n    \n    // Continue adding other personal information fields...\n  }\n\n  /**\n   * Adds family background section to Excel\n   */\n  private static addFamilyBackgroundToExcel(worksheet: ExcelJS.Worksheet, familyBackground: PDSData['familyBackground']): void {\n    // Implementation for family background section\n  }\n\n  /**\n   * Adds educational background section to Excel\n   */\n  private static addEducationalBackgroundToExcel(worksheet: ExcelJS.Worksheet, educationalBackground: PDSData['educationalBackground']): void {\n    // Implementation for educational background section\n  }\n\n  /**\n   * Adds civil service eligibility section to Excel\n   */\n  private static addCivilServiceEligibilityToExcel(worksheet: ExcelJS.Worksheet, eligibilities: PDSData['civilServiceEligibility']): void {\n    // Implementation for civil service eligibility section\n  }\n\n  /**\n   * Adds work experience section to Excel\n   */\n  private static addWorkExperienceToExcel(worksheet: ExcelJS.Worksheet, workExperiences: PDSData['workExperience']): void {\n    // Implementation for work experience section\n  }\n\n  /**\n   * Creates personal information section for Word document\n   */\n  private static createPersonalInformationWordSection(personalInfo: PDSData['personalInformation']): Paragraph[] {\n    return [\n      new Paragraph({\n        children: [\n          new TextRun({\n            text: \"I. PERSONAL INFORMATION\",\n            bold: true,\n            size: 24,\n          }),\n        ],\n        spacing: { before: 400, after: 200 }\n      }),\n      \n      new Paragraph({\n        children: [\n          new TextRun({ text: \"SURNAME: \", bold: true }),\n          new TextRun({ text: personalInfo.surname }),\n          new TextRun({ text: \"\\t\\tFIRST NAME: \", bold: true }),\n          new TextRun({ text: personalInfo.firstName }),\n        ],\n        spacing: { after: 100 }\n      }),\n      \n      new Paragraph({\n        children: [\n          new TextRun({ text: \"MIDDLE NAME: \", bold: true }),\n          new TextRun({ text: personalInfo.middleName }),\n          new TextRun({ text: \"\\t\\tNAME EXTENSION: \", bold: true }),\n          new TextRun({ text: personalInfo.nameExtension || 'N/A' }),\n        ],\n        spacing: { after: 100 }\n      }),\n      \n      // Continue adding other personal information fields...\n    ];\n  }\n\n  /**\n   * Creates family background section for Word document\n   */\n  private static createFamilyBackgroundWordSection(familyBackground: PDSData['familyBackground']): Paragraph[] {\n    // Implementation for family background section\n    return [];\n  }\n\n  /**\n   * Creates educational background section for Word document\n   */\n  private static createEducationalBackgroundWordSection(educationalBackground: PDSData['educationalBackground']): Paragraph[] {\n    // Implementation for educational background section\n    return [];\n  }\n\n  /**\n   * Generates HTML content for PDF export\n   */\n  private static generatePDSHTML(pdsData: PDSData, options: ExportOptions): string {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Personal Data Sheet</title>\n        <style>\n            @page {\n                size: legal;\n                margin: 0.5in;\n            }\n            body {\n                font-family: Arial, sans-serif;\n                font-size: 10px;\n                line-height: 1.2;\n                margin: 0;\n                padding: 0;\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 20px;\n            }\n            .title {\n                font-size: 16px;\n                font-weight: bold;\n                margin-bottom: 5px;\n            }\n            .form-number {\n                font-style: italic;\n                font-size: 12px;\n                margin-bottom: 15px;\n            }\n            .warning {\n                color: red;\n                font-weight: bold;\n                font-size: 9px;\n                margin-bottom: 20px;\n                text-align: center;\n            }\n            .section {\n                margin-bottom: 15px;\n            }\n            .section-title {\n                background-color: #e0e0e0;\n                font-weight: bold;\n                padding: 5px;\n                margin-bottom: 10px;\n            }\n            .field-row {\n                display: flex;\n                margin-bottom: 5px;\n            }\n            .field-label {\n                font-weight: bold;\n                width: 150px;\n            }\n            .field-value {\n                flex: 1;\n                border-bottom: 1px solid #000;\n                min-height: 15px;\n                padding-left: 5px;\n            }\n            table {\n                width: 100%;\n                border-collapse: collapse;\n                margin-bottom: 10px;\n            }\n            th, td {\n                border: 1px solid #000;\n                padding: 3px;\n                text-align: left;\n                font-size: 9px;\n            }\n            th {\n                background-color: #e0e0e0;\n                font-weight: bold;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"header\">\n            <div class=\"title\">PERSONAL DATA SHEET</div>\n            <div class=\"form-number\">(CS Form No. 212, Revised 2017)</div>\n            <div class=\"warning\">\n                Warning: Any misrepresentation made in the Personal Data Sheet and the Work Experience Sheet shall cause the filing of administrative/criminal case/s against the person concerned.\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <div class=\"section-title\">I. PERSONAL INFORMATION</div>\n            <div class=\"field-row\">\n                <div class=\"field-label\">SURNAME:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.surname}</div>\n                <div class=\"field-label\">FIRST NAME:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.firstName}</div>\n            </div>\n            <div class=\"field-row\">\n                <div class=\"field-label\">MIDDLE NAME:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.middleName}</div>\n                <div class=\"field-label\">NAME EXTENSION:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.nameExtension || 'N/A'}</div>\n            </div>\n            <div class=\"field-row\">\n                <div class=\"field-label\">DATE OF BIRTH:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.dateOfBirth}</div>\n                <div class=\"field-label\">PLACE OF BIRTH:</div>\n                <div class=\"field-value\">${pdsData.personalInformation.placeOfBirth}</div>\n            </div>\n            <!-- Add more personal information fields -->\n        </div>\n        \n        <div class=\"section\">\n            <div class=\"section-title\">II. FAMILY BACKGROUND</div>\n            <!-- Add family background content -->\n        </div>\n        \n        <div class=\"section\">\n            <div class=\"section-title\">III. EDUCATIONAL BACKGROUND</div>\n            <!-- Add educational background table -->\n        </div>\n        \n        <!-- Add other sections -->\n        \n    </body>\n    </html>\n    `;\n  }\n}